#+TITLE: 遗传算法
#+AUTHOR: 胡琛

* 介绍

  遗传算法 (Genetic Algorithm) 遵循 “适者生存”，“优胜劣汰” 的原则，是一类借鉴生物界自然选择和自然
  遗传机制的随机化搜索算法。

  遗传算法模拟一个人工种群的进化过程，通过选择 (Selection), 交叉 (Crossover), 以及变异 (Mutation)
  等机制，在每次迭代中都保留一组候选个体，重复此过程，种群经过若干代进化后，理想情况下其适应度达到 *近似最优*
  的状态。

* 组成

  1. 编码 -- 创造染色体
  2. 个体 -- 种群
  3. 适应度函数
  4. 遗传算子
     - 选择
     - 交叉
     - 变异
  5. 运行参数
     - 是否选择精英操作
     - 种群大小
     - 染色体长度
     - 最大迭代次数
     - 交叉概率
     - 变异概率

* 案例
  
  求解函数 $f(x)=x+10\times\sin(5\times x)+7\times\cos(4\times x)$ 在区间 $[0, 9]$ 的最大值。
  
  函数图像如下：
  
  #+BEGIN_SRC python
    import numpy as np
    import matplotlib.pyplot as plt

    x = np.linspace(0., 9., 300)
    y = x + 10*np.sin(5*x) + 7*np.cos(4*x)

    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    ax.plot(x, y)
    fig.show()
  #+END_SRC
  
* 编码与解码
  
  实现遗传算法第一步是明确对求解问题的编码和解码方式。对于函数优化问题，一般有两种编码方式：
  1. 实数编码：直接用实数表示基因，容易理解且不需要解码过程，但容易过早收敛，从而陷入局部最优
  2. 二进制编码：稳定性高，种群多样性大，但需要的存储空间大，需要解码且难以理解
  
** 编码
   
   对于本案例，如果采用二进制编码，编码方式如下：
   1. 假定求解的精度为 $10^{-4}$, 则可以将 $x$ 的解空间划分为 $(9-0)\times 10^4 = 90000$ 个等分
   2. $2^16 < 90000 < 2^17$, 因此，需要 17 位二进制数来表示这些解。换句话而言，一个解的编码就是一个 17 
      位的二进制串。
   
** 解码

   对于本案例，解码公式如下：
   \begin{equation}
    x = 0 + decimal(chromosom)\times (9-0)/(2^17 - 1) 
   \end{equation}

   通用的公式如下：
   \begin{equation}
     \begin{array}{l}
     f(x), x\in [lower_{bound}, upper_{bound}]\\
     x = lower_{bound} + decimal(chromesome)\times(upper_{bound}-lower_{bound})/(2^{chromesome_{size}}-1)
     \end{array}
   \end{equation}
   其中， $lower_{bound}$ 指函数定义域下限； $upper_{bound}$ 指函数定义域上限； $chromesome_{size}$ 指
   染色体长度。
   
* 个体与种群
  
  - 染色体: 表达某种特征
  - 个体：指 “染色体” 的载体，一个 “个体” 有一条 “染色体”
  - 种群：许多个体组成一个种群
    对该案例，对应的是一个一维点集 (x轴上 $[0, 9]$ 的线段)。
  
* 适应度函数

  遗传算法中，一个个体好坏用 “适应度函数” 评价，对本案例， $f(x)$ 就可以作为适应度函数，适应度函数
  越大，解的质量越高。
  
* 遗传算子

  为了让种群变得优秀，需要其不断进化，即每次进化尽可能保留种群中的优秀个体，淘汰掉不理想的个体，并且
  在优秀个体之间进行染色体的交叉，某些个体还可能产生变异。

  如果种群能够一直进行进化，总能找到最好的解，但是由于时间有限，往往得到的是一个局部最优解。对于给定
  种群，为了让其进化，需要做到：
  
  1. 选择
     - 从前代种群中选择多对较优个体，一对较优个体称之为一对父母，让父母将他们的基因传递到下一代，直到
       下一代个体数量达到种群数量上限
     - 在选择操作前，将种群中个体按照适应度从小到大进行排列
     - 采用轮盘赌选择方法 (也可以采用其他方案)，每个个体被选择的概率与其适应度函数值大小成正比
     - 轮盘赌选择方法具有随机性，在选择过程中可能会丢掉较好的个体，所以可以使用精英机制，将前代最优个
       体直接选择
  2. 交叉
     - 两个待交叉的不同染色体根据交叉概率 (cross_rate) 按某种方式交换其部分基因
     - 采用单点交叉法，也可以使用其他交叉方法
  3. 变异
     - 染色体按照变异概率进行染色体变异
     - 采用单点变异法，也可以使用其他变异方法
       
  一般而言，交叉概率比较大，变异概率极低。
  
* 算法流程

  [[file:ga/ga_01.png]]
* 实现 
